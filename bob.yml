# Orb 'entur/owasp@0.0.6' resolved to 'entur/owasp@0.0.6'
# Orb 'circleci/aws-cli@0.1.18' resolved to 'circleci/aws-cli@0.1.18'
# Orb 'circleci/kubernetes@0.10.1' resolved to 'circleci/kubernetes@0.10.1'
# Orb 'circleci/helm@0.2.3' resolved to 'circleci/helm@0.2.3'
version: 2
jobs:
  build:
    docker:
    - image: circleci/openjdk:11-jdk-browsers
    - image: localstack/localstack:0.10.5
      environment:
      - SERVICES=sqs
      - DEBUG=${DEBUG- }
      - DATA_DIR=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
      - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR- }
      - AWS_EXECUTION_ENV=True
      - DEFAULT_REGION=eu-west-2
      - TMPDIR=/private
    working_directory: ~/app
    steps:
    - checkout
    - restore_cache:
        keys:
        - gradle-{{ checksum "build.gradle" }}
        - gradle-
    - run:
        environment:
          SQS_PROVIDER: localstack
        command: ./gradlew build
    - run:
        name: Record the Application Version
        command: |
          jar xvf build/libs/whereabouts-api-*.jar BOOT-INF/classes/META-INF/build-info.properties
          APP_VERSION=$(grep 'build.version=' BOOT-INF/classes/META-INF/build-info.properties | awk -F= '{print $2}')
          rm BOOT-INF/classes/META-INF/build-info.properties

          # make up a good version name
          TAG=${APP_VERSION}.${CIRCLE_BRANCH}
          if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
            TAG=${APP_VERSION}
          fi
          echo $TAG > ./app_version.txt
    - save_cache:
        paths:
        - ~/.gradle
        key: gradle-{{ checksum "build.gradle" }}
    - store_test_results:
        path: build/test-results
    - store_artifacts:
        path: build/reports/tests
    - persist_to_workspace:
        root: .
        paths:
        - build/libs
        - build.gradle
        - app_version.txt
  build_docker:
    docker:
    - image: circleci/python:3
    working_directory: ~/app
    steps:
    - checkout
    - attach_workspace:
        at: ~/app
    - setup_remote_docker:
        docker_layer_caching: true
    - run:
        name: Build container and publish to docker hub
        command: |
          APP_VERSION=$(cat ./app_version.txt)
          docker build --rm=false . \
             --tag "mojdigitalstudio/whereabouts-api:$APP_VERSION" \
             --label "maintainer=jamie.draper@digital.justice.gov.uk" \
             --label "app.version=$APP_VERSION" \
             --label "build.version=$APP_VERSION" \
             --label "build.number=$CIRCLE_BUILD_NUM" \
             --label "build.url=$CIRCLE_BUILD_URL" \
             --label "build.gitref=$CIRCLE_SHA1"

          if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
            # publish to docker hub as the tag
           docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
           docker tag mojdigitalstudio/whereabouts-api:$APP_VERSION mojdigitalstudio/whereabouts-api:latest
           docker push mojdigitalstudio/whereabouts-api:$APP_VERSION
           docker push mojdigitalstudio/whereabouts-api:latest
          fi
  deploy_dev:
    docker:
    - image: circleci/python:3
    working_directory: ~/app
    steps:
    - run:
        name: Install AWS CLI
        command: |
          if which aws > /dev/null; then
            echo "The AWS CLI is already installed. Skipping."
            exit 0
          fi

          export PIP=$(which pip pip3 | head -1)
          if [[ -n $PIP ]]; then
            if which sudo > /dev/null; then
              sudo $PIP install awscli --upgrade
            else
              # This installs the AWS CLI to ~/.local/bin. Make sure that ~/.local/bin is in your $PATH.
              $PIP install awscli --upgrade --user
            fi
          elif [[ $(which unzip curl | wc -l) -eq 2 ]]; then
            cd
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            if which sudo > /dev/null; then
              sudo ~/awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            else
              # This installs the AWS CLI to the default location (~/.local/lib/aws) and create a symbolic link (symlink) at ~/bin/aws. Make sure that ~/bin is in your $PATH.
              awscli-bundle/install -b ~/bin/aws
            fi
            rm -rf awscli-bundle*
            cd -
          else
            echo "Unable to install AWS CLI. Please install pip."
            exit 1
          fi
    - run:
        command: |
          if [[ latest == "latest" ]]; then
            # get latest kops release
            KOPS_VERSION=$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)
          else
            KOPS_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kops
          curl -LO https://github.com/kubernetes/kops/releases/download/$KOPS_VERSION/kops-$PLATFORM-amd64

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x kops-$PLATFORM-amd64

          $SUDO mv kops-$PLATFORM-amd64 /usr/local/bin/kops
        name: Install kops
    - run:
        command: |
          if [[ latest == "latest" ]]; then
            # get latest kubectl release
            KUBECTL_VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          else
            KUBECTL_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kubectl
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/$PLATFORM/amd64/kubectl

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x ./kubectl

          $SUDO mv ./kubectl /usr/local/bin
        name: Install kubectl
    - run:
        command: |
          if which helm > /dev/null; then
            echo "helm is already installed"
            exit 0
          fi
          VERSION="v3.0.2"
          IS_VERSION_2="true"
          if [ -n "${VERSION}" ]; then
            set -- "$@" --version "${VERSION}"
            if [ "${VERSION}" == "${VERSION#v2.}" ]; then
              IS_VERSION_2="false"
            fi
          fi
          INSTALL_SCRIPT="https://raw.githubusercontent.com/helm/helm/master/scripts/get"
          curl "${INSTALL_SCRIPT}" > get_helm.sh
          chmod 700 get_helm.sh
          ./get_helm.sh "$@"
          if [ "${IS_VERSION_2}" == "true" ]; then
            helm init --client-only
          fi
        name: Install and init the helm client (if necessary)
    - run:
        name: Setup kubectl
        command: |
          echo -n "${KUBE_ENV_CACERT}" | base64 -d > /tmp/cluster_ca.crt
          kubectl config set-cluster "${KUBE_ENV_NAME}" \
            --certificate-authority="/tmp/cluster_ca.crt" \
            --server="https://api.${KUBE_ENV_NAME}"
          kubectl config set-credentials circleci \
            --token="${KUBE_ENV_TOKEN}"
          kubectl config set-context circleci \
            --cluster="${KUBE_ENV_NAME}" \
            --user="circleci" \
            --namespace="${KUBE_ENV_NAMESPACE}"
          # confirm setup is ok
          kubectl config use-context circleci
          kubectl -n "${KUBE_ENV_NAMESPACE}" get deployments
    - checkout:
        path: ~/git
    - attach_workspace:
        at: ~/app
    - deploy:
        name: Deploy to dev
        command: |
          APP_VERSION=$(cat ~/app/app_version.txt)
          sed -i "s/appVersion: \".*\"/appVersion: \"${APP_VERSION}\"/g" ~/git/helm_deploy/whereabouts-api/Chart.yaml
          aws secretsmanager get-secret-value --secret-id ${KUBE_ENV_NAMESPACE} | jq -r .SecretString | \
          helm upgrade whereabouts-api ~/git/helm_deploy/whereabouts-api/. \
            --install --wait --reset-values --timeout 5m --history-max 10 \
            --namespace=${KUBE_ENV_NAMESPACE} \
            --values ~/git/helm_deploy/values-dev.yaml \
            --values - \
            --set image.tag="${APP_VERSION}"
  deploy_preprod:
    docker:
    - image: circleci/python:3
    working_directory: ~/app
    steps:
    - run:
        name: Install AWS CLI
        command: |
          if which aws > /dev/null; then
            echo "The AWS CLI is already installed. Skipping."
            exit 0
          fi

          export PIP=$(which pip pip3 | head -1)
          if [[ -n $PIP ]]; then
            if which sudo > /dev/null; then
              sudo $PIP install awscli --upgrade
            else
              # This installs the AWS CLI to ~/.local/bin. Make sure that ~/.local/bin is in your $PATH.
              $PIP install awscli --upgrade --user
            fi
          elif [[ $(which unzip curl | wc -l) -eq 2 ]]; then
            cd
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            if which sudo > /dev/null; then
              sudo ~/awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            else
              # This installs the AWS CLI to the default location (~/.local/lib/aws) and create a symbolic link (symlink) at ~/bin/aws. Make sure that ~/bin is in your $PATH.
              awscli-bundle/install -b ~/bin/aws
            fi
            rm -rf awscli-bundle*
            cd -
          else
            echo "Unable to install AWS CLI. Please install pip."
            exit 1
          fi
    - run:
        command: |
          if [[ latest == "latest" ]]; then
            # get latest kops release
            KOPS_VERSION=$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)
          else
            KOPS_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kops
          curl -LO https://github.com/kubernetes/kops/releases/download/$KOPS_VERSION/kops-$PLATFORM-amd64

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x kops-$PLATFORM-amd64

          $SUDO mv kops-$PLATFORM-amd64 /usr/local/bin/kops
        name: Install kops
    - run:
        command: |
          if [[ latest == "latest" ]]; then
            # get latest kubectl release
            KUBECTL_VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          else
            KUBECTL_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kubectl
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/$PLATFORM/amd64/kubectl

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x ./kubectl

          $SUDO mv ./kubectl /usr/local/bin
        name: Install kubectl
    - run:
        command: |
          if which helm > /dev/null; then
            echo "helm is already installed"
            exit 0
          fi
          VERSION="v3.0.2"
          IS_VERSION_2="true"
          if [ -n "${VERSION}" ]; then
            set -- "$@" --version "${VERSION}"
            if [ "${VERSION}" == "${VERSION#v2.}" ]; then
              IS_VERSION_2="false"
            fi
          fi
          INSTALL_SCRIPT="https://raw.githubusercontent.com/helm/helm/master/scripts/get"
          curl "${INSTALL_SCRIPT}" > get_helm.sh
          chmod 700 get_helm.sh
          ./get_helm.sh "$@"
          if [ "${IS_VERSION_2}" == "true" ]; then
            helm init --client-only
          fi
        name: Install and init the helm client (if necessary)
    - run:
        name: Setup kubectl
        command: |
          echo -n "${KUBE_ENV_CACERT}" | base64 -d > /tmp/cluster_ca.crt
          kubectl config set-cluster "${KUBE_ENV_NAME}" \
            --certificate-authority="/tmp/cluster_ca.crt" \
            --server="https://api.${KUBE_ENV_NAME}"
          kubectl config set-credentials circleci \
            --token="${KUBE_ENV_TOKEN}"
          kubectl config set-context circleci \
            --cluster="${KUBE_ENV_NAME}" \
            --user="circleci" \
            --namespace="${KUBE_ENV_NAMESPACE}"
          # confirm setup is ok
          kubectl config use-context circleci
          kubectl -n "${KUBE_ENV_NAMESPACE}" get deployments
    - checkout:
        path: ~/git
    - attach_workspace:
        at: ~/app
    - deploy:
        name: Deploy to preprod
        command: |
          APP_VERSION=$(cat ~/app/app_version.txt)
          sed -i "s/appVersion: \".*\"/appVersion: \"${APP_VERSION}\"/g" ~/git/helm_deploy/whereabouts-api/Chart.yaml
          aws secretsmanager get-secret-value --secret-id ${KUBE_ENV_NAMESPACE} | jq -r .SecretString | \
          helm upgrade whereabouts-api ~/git/helm_deploy/whereabouts-api/. \
            --install --wait --reset-values --timeout 5m --history-max 10 \
            --namespace=${KUBE_ENV_NAMESPACE} \
            --values ~/git/helm_deploy/values-preprod.yaml \
            --values - \
            --set image.tag="${APP_VERSION}"
  deploy_prod:
    docker:
    - image: circleci/python:3
    working_directory: ~/app
    steps:
    - run:
        name: Install AWS CLI
        command: |
          if which aws > /dev/null; then
            echo "The AWS CLI is already installed. Skipping."
            exit 0
          fi

          export PIP=$(which pip pip3 | head -1)
          if [[ -n $PIP ]]; then
            if which sudo > /dev/null; then
              sudo $PIP install awscli --upgrade
            else
              # This installs the AWS CLI to ~/.local/bin. Make sure that ~/.local/bin is in your $PATH.
              $PIP install awscli --upgrade --user
            fi
          elif [[ $(which unzip curl | wc -l) -eq 2 ]]; then
            cd
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            if which sudo > /dev/null; then
              sudo ~/awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            else
              # This installs the AWS CLI to the default location (~/.local/lib/aws) and create a symbolic link (symlink) at ~/bin/aws. Make sure that ~/bin is in your $PATH.
              awscli-bundle/install -b ~/bin/aws
            fi
            rm -rf awscli-bundle*
            cd -
          else
            echo "Unable to install AWS CLI. Please install pip."
            exit 1
          fi
    - run:
        command: |
          if [[ latest == "latest" ]]; then
            # get latest kops release
            KOPS_VERSION=$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)
          else
            KOPS_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kops
          curl -LO https://github.com/kubernetes/kops/releases/download/$KOPS_VERSION/kops-$PLATFORM-amd64

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x kops-$PLATFORM-amd64

          $SUDO mv kops-$PLATFORM-amd64 /usr/local/bin/kops
        name: Install kops
    - run:
        command: |
          if [[ latest == "latest" ]]; then
            # get latest kubectl release
            KUBECTL_VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          else
            KUBECTL_VERSION=latest
          fi

          PLATFORM="linux"
          if [ -n "$(uname | grep "Darwin")" ]; then
            PLATFORM="darwin"
          fi

          # download kubectl
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/$PLATFORM/amd64/kubectl

          [ -w /usr/local/bin ] && SUDO="" || SUDO=sudo

          $SUDO chmod +x ./kubectl

          $SUDO mv ./kubectl /usr/local/bin
        name: Install kubectl
    - run:
        command: |
          if which helm > /dev/null; then
            echo "helm is already installed"
            exit 0
          fi
          VERSION="v3.0.2"
          IS_VERSION_2="true"
          if [ -n "${VERSION}" ]; then
            set -- "$@" --version "${VERSION}"
            if [ "${VERSION}" == "${VERSION#v2.}" ]; then
              IS_VERSION_2="false"
            fi
          fi
          INSTALL_SCRIPT="https://raw.githubusercontent.com/helm/helm/master/scripts/get"
          curl "${INSTALL_SCRIPT}" > get_helm.sh
          chmod 700 get_helm.sh
          ./get_helm.sh "$@"
          if [ "${IS_VERSION_2}" == "true" ]; then
            helm init --client-only
          fi
        name: Install and init the helm client (if necessary)
    - run:
        name: Setup kubectl
        command: |
          echo -n "${KUBE_ENV_CACERT}" | base64 -d > /tmp/cluster_ca.crt
          kubectl config set-cluster "${KUBE_ENV_NAME}" \
            --certificate-authority="/tmp/cluster_ca.crt" \
            --server="https://api.${KUBE_ENV_NAME}"
          kubectl config set-credentials circleci \
            --token="${KUBE_ENV_TOKEN}"
          kubectl config set-context circleci \
            --cluster="${KUBE_ENV_NAME}" \
            --user="circleci" \
            --namespace="${KUBE_ENV_NAMESPACE}"
          # confirm setup is ok
          kubectl config use-context circleci
          kubectl -n "${KUBE_ENV_NAMESPACE}" get deployments
    - checkout:
        path: ~/git
    - attach_workspace:
        at: ~/app
    - deploy:
        name: Deploy to prod
        command: |
          APP_VERSION=$(cat ~/app/app_version.txt)
          sed -i "s/appVersion: \".*\"/appVersion: \"${APP_VERSION}\"/g" ~/git/helm_deploy/whereabouts-api/Chart.yaml
          aws secretsmanager get-secret-value --secret-id ${KUBE_ENV_NAMESPACE} | jq -r .SecretString | \
          helm upgrade whereabouts-api ~/git/helm_deploy/whereabouts-api/. \
            --install --wait --reset-values --timeout 5m --history-max 10 \
            --namespace=${KUBE_ENV_NAMESPACE} \
            --values ~/git/helm_deploy/values-prod.yaml \
            --values - \
            --set image.tag="${APP_VERSION}"
  owasp/gradle_owasp_dependency_check:
    docker:
    - image: circleci/openjdk:11-jdk-browsers
    - image: localstack/localstack:0.10.5
      environment:
      - SERVICES=sqs
      - DEBUG=${DEBUG- }
      - DATA_DIR=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
      - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR- }
      - AWS_EXECUTION_ENV=True
      - DEFAULT_REGION=eu-west-2
      - TMPDIR=/private
    working_directory: ~/app
    steps:
    - checkout
    - run:
        name: Generate Cache Checksum
        command: find . -name 'build.gradle' | sort | xargs cat | shasum | awk '{print $1}' > /tmp/gradle_cache_seed
    - restore_cache:
        key: gradle-{{ checksum "/tmp/gradle_cache_seed" }}-{{ checksum ".circleci/config.yml" }}
    - run:
        name: Generate OWASP Dependency-Check Database CircleCI cache keys
        command: |
          echo gradle-gradle-cache-key-v6 >> /tmp/key
          echo $(date +"%Y") >> /tmp/year
          echo $(( $(date +"%_j") / 84)) >> /tmp/twelveWeeks
          echo $(( $(date +"%_j") / 28)) >> /tmp/fourWeeks
          echo $(( $(date +"%_j") / 7)) >> /tmp/week
          echo $(( $(date +"%_j"))) >> /tmp/day
          echo $(( $(date +"%_H") / 12)) >> /tmp/twelveHoursOfDay
          echo $(( $(date +"%_H") / 4)) >> /tmp/fourHoursOfDay
    - restore_cache:
        name: Restore OWASP Dependency-Check Database from CircleCI cache
        keys:
        - cve-cache-{{ checksum "/tmp/key" }}-{{ checksum "/tmp/year" }}-{{ checksum "/tmp/twelveWeeks" }}-{{ checksum "/tmp/fourWeeks" }}-{{ checksum "/tmp/week" }}-{{ checksum "/tmp/day" }}-{{ checksum "/tmp/twelveHoursOfDay" }}-{{ checksum "/tmp/fourHoursOfDay" }}
        - cve-cache-{{ checksum "/tmp/key" }}-{{ checksum "/tmp/year" }}-{{ checksum "/tmp/twelveWeeks" }}-{{ checksum "/tmp/fourWeeks" }}-{{ checksum "/tmp/week" }}-{{ checksum "/tmp/day" }}-{{ checksum "/tmp/twelveHoursOfDay" }}
        - cve-cache-{{ checksum "/tmp/key" }}-{{ checksum "/tmp/year" }}-{{ checksum "/tmp/twelveWeeks" }}-{{ checksum "/tmp/fourWeeks" }}-{{ checksum "/tmp/week" }}-{{ checksum "/tmp/day" }}
        - cve-cache-{{ checksum "/tmp/key" }}-{{ checksum "/tmp/year" }}-{{ checksum "/tmp/twelveWeeks" }}-{{ checksum "/tmp/fourWeeks" }}-{{ checksum "/tmp/week" }}
        - cve-cache-{{ checksum "/tmp/key" }}-{{ checksum "/tmp/year" }}-{{ checksum "/tmp/twelveWeeks" }}-{{ checksum "/tmp/fourWeeks" }}
        - cve-cache-{{ checksum "/tmp/key" }}-{{ checksum "/tmp/year" }}-{{ checksum "/tmp/twelveWeeks" }}
        - cve-cache-{{ checksum "/tmp/key" }}-{{ checksum "/tmp/year" }}
        - cve-cache-{{ checksum "/tmp/key" }}
    - run:
        name: Update OWASP Dependency-Check Database
        command: ./gradlew dependencyCheckUpdate --info
    - save_cache:
        name: Save OWASP Dependency-Check Database to CircleCI cache
        key: cve-cache-{{ checksum "/tmp/key" }}-{{ checksum "/tmp/year" }}-{{ checksum "/tmp/twelveWeeks" }}-{{ checksum "/tmp/fourWeeks" }}-{{ checksum "/tmp/week" }}-{{ checksum "/tmp/day" }}-{{ checksum "/tmp/twelveHoursOfDay" }}-{{ checksum "/tmp/fourHoursOfDay" }}
        paths:
        - ~/.gradle/dependency-check-data
    - run:
        name: Run OWASP Dependency-Check Analyzer
        command: ./gradlew dependencyCheckAnalyze dependencyCheckPurge --info
    - run:
        name: Extract OWASP Dependency-Check reports
        when: always
        command: |
          mkdir -p Reports/OWASP
          cp build/reports/dependency-check*.* Reports/OWASP
    - store_artifacts:
        name: Store OWASP Dependency-Check reports as artifacts (in 'Reports/OWASP' directory)
        path: Reports/OWASP
        destination: Reports/OWASP
    - save_cache:
        paths:
        - ~/.gradle/caches
        - ~/.gradle/wrapper
        key: gradle-{{ checksum "/tmp/gradle_cache_seed" }}-{{ checksum ".circleci/config.yml" }}
workflows:
  version: 2
  build-test-and-deploy:
    jobs:
    - build:
        filters:
          tags:
            ignore: /.*/
    - build_docker:
        filters:
          branches:
            only: master
        requires:
        - build
    - deploy_dev:
        requires:
        - build_docker
    - request-preprod-approval:
        type: approval
        requires:
        - deploy_dev
    - deploy_preprod:
        requires:
        - request-preprod-approval
        context: whereabouts-api-preprod
    - request-prod-approval:
        type: approval
        requires:
        - deploy_preprod
    - deploy_prod:
        requires:
        - request-prod-approval
        context: whereabouts-api-prod
  scheduled:
    triggers:
    - schedule:
        cron: 0 7 * * 1-5
        filters:
          branches:
            only:
            - master
    jobs:
    - owasp/gradle_owasp_dependency_check
